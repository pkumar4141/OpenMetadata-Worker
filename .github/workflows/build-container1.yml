name: "Worker: Step 4.2 - Build Container  1"

on:
  workflow_dispatch:
  schedule:
    - cron: '0 1 * * 6'

env:
  # Use docker.io for Docker Hub if empty test
  REGISTRY: docker.io
  IMAGE_BASENAME: "fg-openmetadata-db"
  # IMAGE_BASENAME: "fg-openmetadata-server"
  # IMAGE_BASENAME: "fg-openmetadata-ingestion"
  # IMAGE_NAME: ${{ github.repository }}
  # IMAGE_NAME: "${{ secrets.DOCKER_USER }}/fg-openmetadata-db"
  # IMAGE_NAME: "${{ secrets.DOCKER_USER }}/fg-openmetadata-server"
  # IMAGE_NAME: "${{ secrets.DOCKER_USER }}/fg-openmetadata-ingestion"
  IMAGE_FILE: "./docker/mysql/Dockerfile_mysql"
  # IMAGE_FILE: "./docker/docker-compose-quickstart/Dockerfile"
  # IMAGE_FILE: "./ingestion/Dockerfile"
  IMAGE_CURRENT_LABEL: "latest"
  SHA: ${{ github.event.pull_request.head.sha || github.event.after }}

jobs:
  # Ref: https://www.cynkra.com/blog/2020-12-23-dynamic-gha/
  # Ref: https://tomasvotruba.com/blog/2020/11/16/how-to-make-dynamic-matrix-in-github-actions/
  # Ref: https://github.blog/changelog/2020-04-15-github-actions-new-workflow-features/#new-fromjson-method-in-expressions
  # Ref: https://docs.github.com/en/actions/learn-github-actions/expressions#fromjson
  matrix:
    runs-on: ubuntu-latest
    # if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    if: ${{ github.event_name == 'schedule'  || github.event_name == 'workflow_dispatch' }}
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - id: set-matrix
      run: |
        if [[ ${{ vars.DEV_RELEASE_BRANCH }} != ${{ vars.PROD_RELEASE_BRANCH }} ]];then
          echo "matrix={\"release_branch\":[\"${{ vars.DEV_RELEASE_BRANCH }}\",\"${{ vars.PROD_RELEASE_BRANCH }}\"]}" >> $GITHUB_OUTPUT
        else
          echo "matrix={\"release_branch\":[\"${{ vars.PROD_RELEASE_BRANCH }}\"]}" >> $GITHUB_OUTPUT
        fi

  check-matrix:
    runs-on: ubuntu-latest
    needs: matrix
    steps:
      - name: Install json2yaml
        run: |
          sudo npm install -g json2yaml

      - name: Check matrix definition
        run: |
          matrix='${{ needs.matrix.outputs.matrix }}'
          echo $matrix
          echo $matrix | jq .
          echo $matrix | json2yaml

  build:
    runs-on: ubuntu-latest
    needs: matrix
    permissions:
      security-events: write
      actions: read
      contents: read
      packages: write
    strategy:
      matrix: ${{ fromJSON(needs.matrix.outputs.matrix) }}

    steps:
    # Checkout
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        repository: Jason-Clark-FG/OpenMetadata-FG
        fetch-depth: 0
        ssh-key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
        ref: "${{ matrix.release_branch }}-${{ vars.BRANCH_SUFFIX }}"

    # Ref: https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#example-of-writing-an-environment-variable-to-github_env
    - name: Additional Variables
      run: |
        echo "IMAGE_NAME=${{ secrets.DOCKER_USER }}/${{ env.IMAGE_BASENAME }}" >> $GITHUB_ENV

    # Show Info
    - name: "Show: Info"
      run: |
        ls -lDR ${GITHUB_WORKSPACE} | grep ':$'
        env | sort

    # Docker Buildx
    - name: Setup Docker buildx
      uses: docker/setup-buildx-action@v3

    # Login against a Docker registry except on PR
    # https://github.com/docker/login-action
    - name: Log into registry ${{ env.REGISTRY }}
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PAT }}

    ## IMAGE1
    # Extract metadata (tags, labels) for Docker
    # https://github.com/docker/metadata-action
    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        labels: |
            # org.opencontainers.image.revision=${{ env.SHA }}
            org.opencontainers.image.revision=${{ matrix.release_branch }}
        tags: |
            type=edge,branch=$repo.default_branch
            type=semver,pattern=v{{version}}
            type=sha,prefix=,suffix=,format=short

    # Build and push Docker image with Buildx (don't push on PR)
    # https://github.com/docker/build-push-action
    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@v5
      with:
        # context: ${GITHUB_WORKSPACE}/OpenMetadata-FG/
        context: .
        file: ${{ env.IMAGE_FILE }}
        push: ${{ github.event_name != 'pull_request' }}
        # tags: ${{ steps.meta.outputs.tags }}
        tags: |
          ${{ env.IMAGE_NAME }}:${{ env.IMAGE_CURRENT_LABEL }}
          ${{ env.IMAGE_NAME }}:${{ matrix.release_branch }}
        labels: |
          ${{ steps.meta.outputs.labels }}
          org.opencontainers.image.title=${{ env.IMAGE_BASENAME }}
          org.opencontainers.image.url=https://${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # - name: Docker Scout
    #   id: docker-scout
    #   # if: ${{ github.event_name == 'pull_request' }}
    #   uses: docker/scout-action@v1
    #   with:
    #     command: compare
    #     image: ${{ steps.meta.outputs.tags }}
    #     to: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:edge
    #     ignore-unchanged: true
    #     only-severities: critical,high
    #     token: ${{ secrets.DOCKER_PAT }}

    # Show Info
    - name: "Show: Info"
      run: |
        ls -lDR ${GITHUB_WORKSPACE}/../ | grep ':$'
        env | sort

    - name: "Docker Scout: Analyze for critical and high CVEs"
      id: docker-scout-cves
      if: ${{ github.event_name != 'pull_request_target' }}
      uses: docker/scout-action@v1
      with:
        command: cves
        # image: ${{ steps.meta.outputs.tags }}
        image: ${{ env.IMAGE_NAME }}:${{ matrix.release_branch }}
        sarif-file: ${{ env.IMAGE_BASENAME }}-${{ matrix.release_branch }}.sarif
        summary: true
        # token: ${{ secrets.DOCKER_PAT }}

    - name: Checkout Self
      uses: actions/checkout@v4
      with:
        path: "self"

    # Ref: https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github#uploading-a-code-scanning-analysis-with-github-actions
    - name: "Docker Scout: Upload SARIF result"
      id: upload-sarif
      if: ${{ github.event_name != 'pull_request_target' }}
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ env.IMAGE_BASENAME }}-${{ matrix.release_branch }}.sarif
        checkout_path: "self"
